SOURCE CODE:
import pandas as pd
import numpy as np
import json
import sys
# Get the input parameters as command line arguments
jsonn = sys.argv[1]
jsonp = sys.argv[2]
jsonk = sys.argv[3]
jsont = sys.argv[4]
jsonh = sys.argv[5]
jsonph = sys.argv[6]
jsonr = sys.argv[7]
# Parse the JSON strings into Python objects
n_params = json.loads(jsonn)
p_params = json.loads(jsonp)
k_params = json.loads(jsonk)
t_params = json.loads(jsont)
h_params = json.loads(jsonh)
ph_params = json.loads(jsonph)
r_params = json.loads(jsonr)
#Read the dataset
dataset = pd.read_csv('ML/crop_recommendation/Crop_recommendation.csv')
#Divide the dataset into features and labels
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values
#Split the dataset into training and test sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)
22
#Train the model using the Random Forest Classifier algorithm
from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state
= 0)
classifier.fit(X_train, y_train)
#Get the user inputs and store them in a numpy array
#user_input = np.array([[90,42,43,21,82,6.5,203]]) - ans is rice.
user_input =
np.array([[n_params,p_params,k_params,t_params,h_params,ph_params,r_params]])
#Make predictions using the trained model
predictions = classifier.predict(user_input)
#Print the predicted crop
print(str(predictions[0]))
Fertilizer recommendation
import pandas as pd
import sys
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeClassifier
# Load the dataset
data = pd.read_csv("ML/fertilizer_recommendation/fertilizer_recommendation.csv")
# Label encoding for categorical features
le_soil = LabelEncoder()
data['Soil Type'] = le_soil.fit_transform(data['Soil Type'])
le_crop = LabelEncoder()
data['Crop Type'] = le_crop.fit_transform(data['Crop Type'])
# Splitting the data into input and output variables
X = data.iloc[:, :8]
y = data.iloc[:, -1]
# Training the Decision Tree Classifier model
dtc = DecisionTreeClassifier(random_state=0)
dtc.fit(X, y)
23
# Get the input parameters as command line arguments
jsonn = sys.argv[1]
jsonp = sys.argv[2]
jsonk = sys.argv[3]
jsont = sys.argv[4]
jsonh = sys.argv[5]
jsonsm = sys.argv[6]
jsonsoil = sys.argv[7]
jsoncrop = sys.argv[8]
soil_enc = le_soil.transform([jsonsoil])[0]
crop_enc = le_crop.transform([jsoncrop])[0]
# Get the user inputs and store them in a numpy array - Urea
#user_input = [[26,52,38,'Sandy','Maize',37,0,0]]
user_input = [[jsont,jsonh,jsonsm,soil_enc,crop_enc,jsonn,jsonk,jsonp]]
fertilizer_name = dtc.predict(user_input)
# Return the prediction as a string
print(str(fertilizer_name[0]))
RainFall Predictions
import pandas as pd
import sys
# Load the dataset into a dataframe
df = pd.read_csv('ML/rainfall_prediction/rainfall_in_india_1901-2015.csv')
# Define a function to predict rainfall for a given district and month
def predict_rainfall(state, month):
 # Filter the dataframe to only include rows with the given district
 state_data = df[df['SUBDIVISION'] == state]
 # Calculate the average rainfall for the given month across all the years
 avg_rainfall = state_data[month].mean()

 # Return the predicted rainfall for the given month
 return avg_rainfall
# Get the input parameters as command line arguments
Jregion = sys.argv[1]
24
Jmonth = sys.argv[2]
#predicted_rainfall = predict_rainfall('ANDAMAN & NICOBAR ISLANDS', 'JAN')
predicted_rainfall = predict_rainfall(Jregion, Jmonth)
print(predicted_rainfall)